spring.application.name=discodeit
springdoc.swagger-ui.path=/swagger-custom-ui.html
springdoc.swagger-ui.groups-order=DESC
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.operations-sorter=method
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.display-request-duration=true
springdoc.api-docs.path=/api-docs
springdoc.show-actuator=true
springdoc.default-consumes-media-type=application/json
springdoc.default-produces-media-type=application/json
springdoc.paths-to-match=/api/**
spring.servlet.multipart.maxFileSize=10MB
spring.servlet.multipart.maxRequestSize=30MB
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.orm.jdbc.bind=trace
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
root-path=${STORAGE_LOCAL_ROOT_PATH:.discodeit/storage}
management.endpoints.web.exposure.include=health, info, metrics, loggers
spring.h2.console.enabled=true
server.port=${SERVER_PORT:8080}
discodeit.storage.s3.access-key=${AWS_S3_ACCESS_KEY}
discodeit.storage.s3.secret-key=${AWS_S3_SECRET_KEY}
discodeit.storage.s3.region=${AWS_S3_REGION}
discodeit.storage.s3.bucket=${AWS_S3_BUCKET}
discodeit.storage.s3.presigned-url-expiration=${AWS_S3_PRESIGNED_URL_EXPIRATION:600}
discodeit.storage.type=${STORAGE_TYPE:local}